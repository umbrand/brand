# Logger.py
# This function makes multiple connections to various Redis databases and subscribes to variables of interest
# It then contains the logic it needs to parse it nicely into a table

import sqlite3
from sqlite3 import Error
import redis
import time

import sys
sys.path.insert(1, '../../lib/')
from redisTools import *

def sqlConnect():
    try:
        con = sqlite3.connect(':memory:')
    except Error:
        print(Error)
    finally:
        return con

class Listener:
    def __init__(self, name, con, redisIP='127.0.0.1', redisPort=6379):

        self.redisIP   = redisIP
        self.redisPort = redisPort
        self.name      = name
        self.r         = redis.Redis(host = redisIP, port = redisPort, db = 0)
        self.con       = con

    def display(self, val):
        print("[logger][%s] %s" % (self.name, val))




class ListenerRawData(Listener):
    def __init__(self, con, redisIP='127.0.0.1', redisPort=6379):
        Listener.__init__(self, 'rawData', con, redisIP='127.0.0.1', redisPort=6379)

        self.display("Creating SQL table")
        con.execute("CREATE TABLE rawData(timestamp TEXT, value TEXT)")

        # print("[logger][ListenerRawData] Initialized Redis")
        # print("[logger][ListenerRawData] Listening for: ", self.subscriptions)
        # self.subscriptions = ['rawData', 'soundStart', 'soundStop']


    def handlerRawData(self, msg):
        data = msg['data'].decode('utf-8')
        splitMsg = data.split(",", 1)
        print("----------------")

        self.con.execute("INSERT INTO rawData values(?, ?)", splitMsg)
        for row in con.execute("select * from rawData"):
            print(row)

    def handlerSoundStart(self, msg):
        print("hander Sound Start")

    def handlerSoundStop(self, msg):
        print("hander Sound Stop")

    def listenAndParse(self):

        p = self.r.pubsub()
        p.subscribe(**{'rawData'    : self.handlerRawData})
        p.subscribe(**{'soundStart' : self.handlerSoundStart})
        p.subscribe(**{'soundStop'  : self.handlerSoundStop})

        
        for m in p.listen():
            pass
        


if __name__ == '__main__':
    con = sqlConnect()
    rawDataListener = ListenerRawData(con)
    rawDataListener.listenAndParse()


