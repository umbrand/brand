
            /* if(item->type == NX_JSON_OBJECT) { */
            /*     printf("I AM AN OBJECT\n"); */
            /* } */

            // Get the name of this variable
            /* sprintf(nameBuffer, "%s", nx_json_get(variable, "name")->text_value); */ 
            /* sprintf(stringList[i], "%s", nameString); */

            /* int l = strlen(nameString) + 1; */

            /* sprintf(redisBuffer, "%s %s", item->key, valueBuffer); */
            /* printf("LINE: %s\n", redisBuffer); */

            /* switch (value->type) { */
            /*     case NX_JSON_INTEGER : sprintf(valueBuffer, "%lld", value->int_value ); break; */
            /*     case NX_JSON_BOOL    : sprintf(valueBuffer, "%lld", value->int_value ); break; */
            /*     case NX_JSON_STRING  : sprintf(valueBuffer, "%s",   value->text_value); break; */
            /*     case NX_JSON_DOUBLE  : sprintf(valueBuffer, "%f",   value->dbl_value ); break; */
            /* } */

            /* sprintf(stringList[i], "%s %s", nameBuffer, valueBuffer); */

/* static void HandlerInt(int sig) */
/* { */
/* 	fprintf("Interrupt called... Freeing memory!"); */
/* 	Display("Exiting Writer!"); */
/* 	exit(1); */
/* } */

/* THIS CODE TOOK ME AN ENTIRE DAY TO GET TO WORK, AND NOW ITS NO LONGER NEEDED */
/* void readYAML(){ */
/*     //begin by reading the YAML file and convert it to JSON */
/*     //The popen() command is used to run a one line python script that converts YAML to JSON */
/*     //The libraries for JSON are more robust than those for YAML for C */

/*     FILE *fp; */
/* 	char *jsonBuffer = malloc(4096); */

/*     fp = popen("python -c \"import sys, yaml, json; f=open('generator.yaml','r'); print(json.dumps(yaml.safe_load(f)))\"", "r"); */
/*     if (fp == NULL) { */
/*         perror("Failed to convert YAML to JSON.\n" ); */
/*         exit(1); */
/*     } */
/*     fread (jsonBuffer, 1, 4096, fp); */

/*     // Now I have a jsonBuffer containing JSON. I am going to parse it for useful information */
/*     // This is based on the nxjson library which I chose because the API was so simple and I found it intuitive */
/*     // So you get the pointer to the JSON buffer and then ask how many variables there are */
/*     // You go through each variable and cover it to a string */
/*     // Then you write the string and name to Redis */
/*     //https://bitbucket.org/yarosla/nxjson/src/default/ */

/*     printf("Trying to parse JSON buffer...\n"); */
/*     const nx_json* json = nx_json_parse_utf8(jsonBuffer); */
/*     if (json->type != NX_JSON_ARRAY) { */
/*         printf("Something went wrong parsing the Json array. Barfing.\n"); */
/*         exit(1); */
/*     } */

/*     int numVariables = json->length; */
/*     char *nameList[numVariables]; */
/*     char *valueList[numVariables]; */
    
/*     printf("Found %d variables in the JSON buffer...\n", numVariables); */
/*     for (int i = 0; i < numVariables; i++) { */

/*         // Find the name of the variable, create memory and then copy the value */
/*         const nx_json* variable = nx_json_item(json, i); */
/*         const char *nameString = nx_json_get(variable, "name")->text_value; */ 
/*         nameList[i] = malloc(strlen(nameString)); */
/*         strcpy(nameList[i], nameString); */

/*         // Find the value of the variable, create memory and then copy the value. TODO: Do this better */
/*         const nx_json* value = nx_json_get(variable, "value"); */
/*         valueList[i] = malloc(256); */

/*         switch (value->type) { */
/*             case NX_JSON_INTEGER : sprintf(valueList[i], "%lld",  value->int_value ); break; */
/*             case NX_JSON_BOOL    : sprintf(valueList[i], "%lld",  value->int_value ); break; */
/*             case NX_JSON_STRING  : sprintf(valueList[i], "%s",    value->text_value); break; */
/*             case NX_JSON_DOUBLE  : sprintf(valueList[i], "%f",    value->dbl_value ); break; */
/*         } */
/*     } */

/*     // At this point I have an array of strings, which contain the information that will be */
/*     // used to initialize Redis. Now I need to find out Redis IP and port */
        
/*     char *redisIP; */
/*     char *redisPort; */

/*     for (int i = 0; i < numVariables; i++) { */

/*         if (strcmp(nameList[i], "redisIP") == 0) { */
/*             redisIP = valueList[i]; */
/*         } */
/*         if (strcmp(nameList[i], "redisPort") == 0) { */
/*             redisPort = valueList[i]; */
/*         } */
/*     } */
/*     printf("From Json, I have redis ip: %s, port: %s\n", redisIP, redisPort); */

/*     //Now I connect to the server with this IP and port information */

/*     const char *hostname = redisIP; */
/*     int port = atoi(redisPort); */
/*     struct timeval timeout = { 1, 500000 }; // 1.5 seconds */

/*     c = redisConnectWithTimeout(hostname, port, timeout); // Global variable */
/*     if (c == NULL || c->err) { */
/*         if (c) { */
/*             printf("Connection error: %s\n", c->errstr); */
/*             redisFree(c); */
/*         } else { */
/*             printf("Connection error: can't allocate redis context\n"); */
/*         } */
/*         exit(1); */
/*     } */

/*     // Having initialized Redis connection, I will add each of the varibles */


/*     for (int i = 0; i < numVariables; i++) { */
/*         freeReplyObject(redisCommand(c, "set %s %s", nameList[i], valueList[i])); */
/*     } */

/*     /1* printf("Redis Initialization Complete!\n"); *1/ */
        
/*     for (int i = 0; i < numVariables; i++) { */
/*         free(nameList[i]); */
/*         free(valueList[i]); */
/*     } */

/*     nx_json_free(json); */
/*     free(jsonBuffer); */

/* } */

