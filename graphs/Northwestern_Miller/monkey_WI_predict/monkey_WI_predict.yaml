Metadata:
    participant_id:             pop
    session_description:        "Isometric Wrist Online Decoding"

# -----------------------------------------------------        

RedisConnection:
    redis_realtime_ip: 127.0.0.1
    redis_realtime_port: 6379
    redis_realtime_config: redis.realtime.conf


# -----------------------------------------------------        


# -- stream definitions --
# expected format:
#
#   streamName:
#       chan_per_stream:    [required]
#       samp_per_stream:    [required]
#       sample_name:        [required]
#       timestamp_name:     [required]
#       sample_type:        [required]
#       timestamp_type:     [required]
#       samp_freq:          [optional]

RedisStreams:
    continuousNeural:
        chan_per_stream:    96 # number of channels
        samp_per_stream:    30 # number of samples per channel per redis entry
        sample_name:        samples
        timestamp_name:     timestamps
        sample_type:        int16
        timestamp_type:     uInt32
        samp_freq:          30000
    rawEMG:
        chan_per_stream:    12
        samp_per_stream:    10
        sample_name:        samples
        timestamp_name:     timestamps
        sample_type:        int16
        timestamp_type:     uInt32
        samp_freq:          2000
    taskInput:
        chan_per_stream:    3
        samp_per_stream:    1
        sample_name:        samples
        timestamp_name:     timestamps
        sample_type:        int16
        timestamp_type:     uInt32
        samp_freq:          1000
    filteredCerebusAdapter:
        chan_per_stream:    96
        samp_per_stream:    30 # since packet from continuousNeural for the moment
        sample_name:        samples
        timestamp_name:     timestamps
        sample_type:        int16
        timestamp_type:     uInt32
    thresholdCrossings:
        chan_per_stream:    96
        samp_per_stream:    1
        sample_name:        crossings
        timestamp_name:     timestamps
        sample_type:        int16
        timestamp_type:     uint32
    state:
        chan_per_stream:    1
        samp_per_stream:    1
        sample_name:        None
        timestamp_name:     time
        sample_type:        char
        timestamp_type:     float
    cursorData:
        chan_per_stream:    1
        samp_per_stream:    1
        sample_name:        state
        timestamp_name:     timestamp
        sample_type:        uint32
        timestamp_type:     uint32
        X_Name:             X
        X_sample_type:      int16
        Y_Name:             Y
        Y_sample_type:      int16
    targetData:
        chan_per_stream:    1
        samp_per_stream:    1
        sample_name:        state
        timestamp_name:     timestamp
        sample_type:        uint32
        timestamp_type:     uint32
        Y_Name:             Y
        Y_sample_type:      int16
        X_Name:             X
        X_sample_type:      int16
        width_Name:         width
        width_sample_type:  int16
        height_Name:        height
        height_sample_type: int16
    decoder:
        chan_per_stream:    3
        samp_per_stream:    1
        sample_name:        state
        timestamp_name:     timestamp
        sample_type:        int16
        timestamp_type:     uint32
    

# -----------------------------------------------------        


Nodes:
    - Name:         cerebusAdapter.bin
      Version:      0.0
      Stage:        start
      redis_inputs:
      redis_outputs:                [continuousNeural, rawEMG, taskInput]
      Parameters:                   
            broadcast_port:         51002
            num_streams:            3
            stream_names:           [continuousNeural, rawEMG, taskInput] # since I can't figure out how to 
            samp_freq:              [30000, 2000, 1000]                   # do the RedisStreams centralized
            packet_type:            [6, 3, 2]                             # method cleanly when we have
            chan_per_stream:        [96, 12, 3]                           # more than just the standard info
            samp_per_stream:        [30, 10, 1]                           # per stream

    - Name:         thresholdExtraction.bin
      Version:      0.0 
      Stage:        main
      redis_inputs:                 [continuousNeural]
      redis_outputs:                [filteredCerebusAdapter, thresholdCrossings]
      Parameters:
            pack_per_call:          1       # number of redis packets to pull per loop
            thresh_mult:            -4.25   # threshold Values
            thresh_calc_len:        2000
            butterworth_enable:     True
            butter_lowercut:        250
            butter_uppercut:        7500
            butter_order:           2
            causal_enable:          True
            buffer_len:             60
            enable_Notch_60:        False
            enable_Notch_120:       False
            enable_CAR:             True
            output_filtered:        False

    - Name:         behaviorFSM.bin
      Version:      0.0
      Stage:        main
      redis_inputs:                 [decoder]
      redis_outputs:                [cursorData,targetData,state]
      Parameters:
            loop_time:              .002 # time for the full processing loop, in seconds
            cursor_sensors:         [0, 1] 
            touchpad_sensor:        2
            touchpad_thresh:        -5000
            movement_max_time:      4 # time in seconds
            touchpad_time:
                min:                .5  # time in seconds
                max:                .5 # time in seconds
            target_hold_time:
                min:                .25 # time in seconds
                max:                .5 # time in seconds
            dispense_time:
                min:                .25 # time in seconds
                max:                .5 # time in seconds
            inter_trial_time:
                min:                2 # time in seconds
                max:                3 # time in seconds
            cursor:
                x_offset:           -63
                y_offset:           36
                gain_x_0:           .04
                gain_x_1:           0
                gain_y_0:           0
                gain_y_1:           .04
                width:              5
                height:             5
            target_list:
                left_close:
                    x:              -150
                    y:              0
                    width:          100
                    height:         100
                left_far:
                    x:              -300
                    y:              0
                    width:          100
                    height:         100
                right_close:
                    x:              150
                    y:              0
                    width:          100
                    height:         100
                right_far:
                    x:              300
                    y:              0
                    width:          100
                    height:         100
                up:
                    x:              0
                    y:              150
                    width:          100
                    height:         100
                down:
                    x:              0
                    y:              -150
                    width:          100
                    height:         100
                left_up:
                    x:              100
                    y:              -100
                    width:          100
                    height:         100
                left_down:
                    x:              -100
                    y:              -100
                    width:          100
                    height:         100
                right_up:
                    x:              100
                    y:              100
                    width:          100
                    height:         100
                right_down:
                    x:              -100
                    y:              100
                    width:          100
                    height:         100

    - Name:         beep.py
      Version:      0.0
      Stage:        main
      redis_inputs:                 [state]
      redis_outputs:                []
      Parameters:
                goSound:            go3.wav
                rewardSound:        reward3.wav
                failureSound:       fail3.wav

    - Name: wiener_run.bin
      Stage:        main
      Version:      0.0
      redis_inputs:                 [thresholdCrossings]
      redis_outputs:                [decoder]
      Parameters:
                # logging level for the process
                log:                INFO
                # Number of targets the wiener_filter should predict
                # e.g. n_targets=2 for decoding x and y channels
                n_targets:          3
                # Number of features to use for decoding
                n_features:         96
                # Type of wiener_filter to use
                decoder_type:       linear
                # path to the saved model
                model_path:         ../../graphs/Northwestern_Miller/monkey_WI_predict/model.pkl
                # history for the Wiener filter
                n_history:          50
                # bin size (in samples)
                bin_size:           5
                # are we predicting Y or dY/dt? (good for force predictions)
                deriv:              True

